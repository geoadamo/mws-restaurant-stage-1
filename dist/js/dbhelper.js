class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants/"}static get DATABASE_REVIEWS_URL(){return"http://localhost:1337/reviews/"}static openDB(){return idb.open("adamoDB",4,e=>{switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id",{unique:!1});case 2:e.createObjectStore("pending_favorite",{keyPath:"id",autoIncrement:!0});case 3:e.createObjectStore("pending_reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id",{unique:!1})}})}static saveRestaurantsToDB(e){return"indexedDB"in window?DBHelper.openDB().then(t=>{const r=t.transaction("restaurants","readwrite"),n=r.objectStore("restaurants");return Promise.all(e.map(e=>n.put(e))).then(()=>e).catch(()=>{throw r.abort(),Error("Restaurants were not added to db")})}):null}static saveReviewsToDB(e){return"indexedDB"in window?DBHelper.openDB().then(t=>{const r=t.transaction("reviews","readwrite"),n=r.objectStore("reviews");return Promise.all(e.map(e=>n.put(e))).then(()=>e).catch(()=>{throw r.abort(),Error("Restaurants were not added to db")})}):null}static savePendingFavorite(e){return"indexedDB"in window?DBHelper.openDB().then(t=>{const r=t.transaction("pending_favorite","readwrite"),n=r.objectStore("pending_favorite");return Promise.all(e.map(e=>n.put(e))).then(()=>e).catch(e=>{throw r.abort(),Error("Favorites were not added to indexed db")})}):null}static savePendingReview(e){return"indexedDB"in window?DBHelper.openDB().then(t=>{const r=t.transaction("pending_reviews","readwrite"),n=r.objectStore("pending_reviews");return Promise.all(e.map(e=>n.put(e))).then(()=>e).catch(e=>{throw r.abort(),Error("Reviews were not added to indexed db")})}):null}static getLocalRestaurantsData(){return"indexedDB"in window?DBHelper.openDB().then(e=>e.transaction("restaurants").objectStore("restaurants").getAll()).then(e=>e):null}static getLocalRestaurantsDataById(e){return"indexedDB"in window?DBHelper.openDB().then(t=>t.transaction("restaurants").objectStore("restaurants").get(parseInt(e))).then(e=>e):null}static getLocalReviewsByRestaurantId(e){return"indexedDB"in window?DBHelper.openDB().then(t=>t.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(parseInt(e))).then(t=>DBHelper.openDB().then(t=>t.transaction("pending_reviews").objectStore("pending_reviews").index("restaurant_id").getAll(parseInt(e))).then(e=>[...t,...e])):null}static syncOfflineData(){return DBHelper.openDB().then(e=>e.transaction("pending_favorite").objectStore("pending_favorite").getAll()).then(e=>e.length?Promise.all(e.map(e=>DBHelper.sendFavoritesToServer(e))):null).then(e=>e?DBHelper.openDB().then(e=>{return e.transaction("pending_favorite","readwrite").objectStore("pending_favorite").clear()}):null).catch(e=>{throw tx.abort(),Error("Panding favorites were not sent to server")}).then(()=>DBHelper.openDB().then(e=>e.transaction("pending_reviews").objectStore("pending_reviews").getAll())).then(e=>e.length?Promise.all(e.map(e=>DBHelper.sendReviewToServer(e))):null).then(e=>e?DBHelper.openDB().then(e=>{return e.transaction("pending_reviews","readwrite").objectStore("pending_reviews").clear()}):null).catch(e=>{throw Error("Panding reviews were not sent to server")})}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL).then(e=>e.json()).then(e=>DBHelper.saveRestaurantsToDB(e)).then(t=>e(null,t)).catch(t=>{DBHelper.getLocalRestaurantsData().then(t=>e(null,t))})}static fetchRestaurantById(e,t){fetch(`${DBHelper.DATABASE_URL}${e}`).then(e=>e.json()).then(e=>t(null,e)).catch(r=>{DBHelper.getLocalRestaurantsDataById(e).then(e=>t(null,e))})}static toggleFavorite(e,t,r){fetch(`${DBHelper.DATABASE_URL}${e}/?is_favorite=${t}`,{method:"put"}).catch(()=>{DBHelper.savePendingFavorite([{restaurant_id:parseInt(e),is_favorite:`${t}`}])}).then(()=>DBHelper.getLocalRestaurantsDataById(e)).then(e=>{e.is_favorite=`${t}`,DBHelper.saveRestaurantsToDB([e])})}static sendFavoritesToServer(e){return fetch(`${DBHelper.DATABASE_URL}${e.restaurant_id}/?is_favorite=${e.is_favorite}`,{method:"put"})}static sendReviewToServer(e){e.createdAt&&delete e.createdAt,e.updatedAt&&delete e.updatedAt,e.id&&delete e.id;let t=new FormData;for(let[r,n]of Object.entries(e))t.append(r,n);return fetch(`${DBHelper.DATABASE_REVIEWS_URL}`,{method:"post",body:t})}static fetchReviewsByRestaurantId(e,t){fetch(`${DBHelper.DATABASE_REVIEWS_URL}?restaurant_id=${e}`).then(e=>e.json()).then(e=>{for(let t of e)t.restaurant_id=parseInt(t.restaurant_id);return DBHelper.saveReviewsToDB(e)}).then(e=>t(null,e)).catch(r=>{DBHelper.getLocalReviewsByRestaurantId(e).then(e=>t(null,e))})}static addReview(e){return fetch(`${DBHelper.DATABASE_REVIEWS_URL}`,{method:"post",body:e}).then(e=>e).catch(()=>{let t={};for(let[r,n]of e)t[r]=n;t.restaurant_id=parseInt(t.restaurant_id);const r=Date.now();return t.createdAt=r,t.updatedAt=r,DBHelper.savePendingReview([t])})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;const i=a.map((e,t)=>a[t].neighborhood),s=i.filter((e,t)=>i.indexOf(e)==t),o=a.map((e,t)=>a[t].cuisine_type),l=o.filter((e,t)=>o.indexOf(e)==t);"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,{restaurants:n,cuisines:l,neighborhoods:s})}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e,t=!1){let r="noimage",n=".jpg";switch(navigator.userAgent.indexOf("Chrome")>-1&&(n=".webp"),e.photograph&&(r=e.photograph),t){case!1:return`img/${r}${n}`;case!0:return`img/small/${r}${n}`}}static toDate(e){return new Date(e).toDateString()}static parseBoolean(e){if("boolean"==typeof e)return e;switch(e.toLowerCase()){case"false":return!1;case"true":return!0}}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}